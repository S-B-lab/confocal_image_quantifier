Automatic cell quantification macro 1: Counting IBA+ and mCherry+cells

/////////////////Introduction & file selection/////////////////
showMessageWithCancel("Welcome to the automatic cell quantifier!\nPress 'OK' to continue or 'Cancel' to exit.");
showMessageWithCancel("The macro requires a multichannel stack. First select the stack, then adjust the settings in the next dialog box.\nPress 'OK' to select or 'Cancel' to exit macro.");

path = File.openDialog("Select file");
open(path);

/////////////////Retrieving user input (cell size & circularity)/////////////////
Dialog.create("Settings");
Dialog.addMessage("Select appropriate thresholds for cell characteristics:");
Dialog.addNumber("Cell size in pixels (min):", 30);
Dialog.addNumber("Cell size in pixels (max):", 1000);
Dialog.addNumber("Cell circularity (min)", 0);
Dialog.addNumber("Cell circularity (max)", 1);
Dialog.addMessage("Select the two colors channels used (one for counterstain, one for specific stain):");
Dialog.addCheckboxGroup(3,1,newArray("Red channel","Green channel","Blue channel"), newArray("false","false","false"));
Dialog.show();

cell_size_min = Dialog.getNumber();
cell_size_max = Dialog.getNumber();
circularity_min = Dialog.getNumber();
circularity_max = Dialog.getNumber();
red_channel = Dialog.getCheckbox();
green_channel = Dialog.getCheckbox();
blue_channel= Dialog.getCheckbox();

color_channel_1 = "";
color_channel_2 = "";
color_channel_3 = "";

if (red_channel == true){
	color_channel_1 = "red";
	color_channel_2 = "blue";
	color_channel_3 = "green";
} else {
	color_channel_1 = "green";
	color_channel_2 = "blue";
	color_channel_3 = "red";
}

showMessageWithCancel("Notification", "Press 'OK' to initiate the cell quantification. Press 'Cancel' to abort.");
start_time = getTime();

/////////////////Channel split & multiplication/////////////////
stack_title = getTitle();
run("Split Channels");
imageCalculator("multiply", stack_title+" ("+color_channel_1+")", stack_title+" ("+color_channel_2+")");
selectWindow(stack_title+" ("+color_channel_3+")");
close();
selectWindow(stack_title+" ("+color_channel_2+")");
close();
run("Make Binary", " ");
run("Watershed", " ");
run("Make Binary", " ");

/////////////////Cell counting/////////////////
for (i=1; i<=nSlices; i++){
	showProgress(-i/nSlices);
	setSlice(i);
	run("Analyze Particles...", "size=cell_size_min-cell_size_max show=[Overlay] pixel [add to manager] circularity=circularity_min-circularity_max summarize");
}

/////////////////Adding overlay to initial image sequence/////////////////
run("Analyze Particles...", "size=cell_size_min-cell_size_max show=[Overlay] pixel circularity=circularity_min-circularity_max stack");

run("To ROI Manager");
open(path);
selectWindow(stack_title);
run("From ROI Manager");


/////////////////Closing windows/////////////////
selectWindow(stack_title+" ("+color_channel_1+")");
close();
selectWindow("ROI Manager");
run("Close");
//selectWindow("Log");
//run("Close");

showMessage("Cell quantification complete!\nRun time: " + toString((getTime()-start_time)/1000)+" seconds");

/////////////////Saving output /////////////////
if (getBoolean("Cell quantification complete! Do you want to save the stack?")==1){	
	saveAs("tiff");
} 

if (getBoolean("Do you want to save the summary table before exiting?\nAdd the extension '.csv' to the filename to save as comma separated value file.")){
	selectWindow("Summary of "+stack_title+" ("+color_channel_1+")");
	
	saveAs("results");
}

showMessage("Please make sure to verify the quantification before usage! Press 'OK' to exit macro");
